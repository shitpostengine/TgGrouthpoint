import psycopg2
import telebot
from telebot import types
from config import host, user, password, db_name, token, admin
bot = telebot.TeleBot(token)
answers = []
question_number = 0
file = open('packages\grouth_point.png', 'rb')


try:
    connection = psycopg2.connect(
        host=host,
        user=user,
        password=password,
        database=db_name
    )

    with connection.cursor() as cursor:
        def get_questions():
            cursor.execute("SELECT type_questions FROM faq_var")
            questions = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            return [question[0] for question in questions]
        questions = get_questions()

except Exception as _ex:
    print('[INFO] Error while working with Postgresql', _ex)
finally:
    if connection:
        connection.close()
        print('[INFO] PostgreSQL connection closed')

@bot.message_handler(commands = ['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='start')
    markup.add(btn)
    bot.send_photo(message.chat.id, file, '–ü—Ä–∏–≤–µ—Ç, {0.first_name}! –≠—Ç–æ –±–æ—Ç –¢–æ—á–∫–∏ —Ä–æ—Å—Ç–∞ ‚ù§Ô∏è!'.format(message.from_user), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'start')
def main_menu(call):
    message = call.message
    markup = types.InlineKeyboardMarkup()
    btn_url = types.InlineKeyboardButton("–°–∞–π—Ç –¢–æ—á–∫–∏ —Ä–æ—Å—Ç–∞", url='https://tchkrosta.ru/')
    btn_faq = types.InlineKeyboardButton('–û—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data='faq_all')
    markup.add(btn_url, btn_faq)
    bot.send_message(message.chat.id, '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç!üíö –ê –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞–º –æ—Ç–≤–µ—Ç - –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º!üìû'.format(message.from_user), reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data == 'faq_all')
def faq_all_btn(call):
    question_id = 0
    markup = types.InlineKeyboardMarkup()
    message = call.message
    chat_id = message.chat.id
    for question in questions:
        question_id += 1
        btn = types.InlineKeyboardButton(text=question + '‚ùî', callback_data='answer_' + str(question_id))# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data
        markup.add(btn)
    btn_start = types.InlineKeyboardButton(text='–ù–∞ –≥–ª–∞–≤–Ω—É—é üè†', callback_data='start')
    markup.add(btn_start)
    bot.send_message(chat_id, '–ö–∞–∫–æ–π —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–æ–≤ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç? üëÄ', reply_markup=markup)

# @bot.callback_query_handler(func=lambda call: call.data == 'start')
# def go_to_start(call):
#     start(call.message)
#     print (call.message)

@bot.callback_query_handler(func=lambda call: 'answer_' in call.data)
def faq_theme_questions_btn(call):
    global question_number
    question_id = 0
    markup = types.InlineKeyboardMarkup()
    message = call.message
    question_number = call.data[-1]
    connection = psycopg2.connect(
        host=host,
        user=user,
        password=password,
        database=db_name
    )

    with connection.cursor() as cursor:
        def get_questions1():
            cursor.execute(f"SELECT questions FROM faq_ans WHERE type_id1 = '{question_number}';")
            questions2 = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            return [question[0] for question in questions2]

        questions1 = get_questions1()
    connection.close()
    print('[INFO] PostgreSQL connection closed  (2.0)')


    for question1 in questions1:
        question_id += 1
        print(question1)
        connection = psycopg2.connect(
            host=host,
            user=user,
            password=password,
            database=db_name
        )

        with connection.cursor() as cursor:
            cursor.execute(f"SELECT row_number FROM (SELECT row_number() OVER() AS row_number, questions FROM faq_ans) AS numbered_rows WHERE questions = '{question1}';")
            answer_number = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            answer_number_str = str(answer_number[0][0])
            connection.close()
            print('[INFO] PostgreSQL connection closed  (2.1)')
        btn = types.InlineKeyboardButton(text=question1 + '‚≠êÔ∏è', callback_data='answer1_' + answer_number_str)  # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π callback_data
        markup.add(btn)
    chat_id = message.chat.id
    btn = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='faq_all')
    markup.add(btn)
    bot.send_message(chat_id, f'–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç? ‚ùì', reply_markup=markup)
    print(call.data)

@bot.callback_query_handler(func=lambda call: 'answer1_' in call.data)
def faq_answers(call):
    question_number1 = call.data[-1]
    markup = types.InlineKeyboardMarkup()
    print(call.data, type(question_number1))
    connection = psycopg2.connect(
        host=host,
        user=user,
        password=password,
        database=db_name
    )

    with connection.cursor() as cursor:
        cursor.execute(f"SELECT answers FROM (SELECT row_number() OVER() AS row_number, answers FROM faq_ans) AS numbered_rows WHERE row_number = {question_number1};")
        answer = cursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        connection.close()
        print('[INFO] PostgreSQL connection closed  (2.2)')
    message = call.message
    chat_id = message.chat.id
    btn = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', callback_data='answer_1')
    markup.add(btn)
    bot.send_message(chat_id, answer, reply_markup=markup)

bot.polling(none_stop = True)
